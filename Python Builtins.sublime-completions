{
    // >>> import builtins, keyword
    // >>> for b in dir(builtins) + [kw + ' ' for kw in keyword.kwlist]:
    // ...     print('{{ "trigger": "{0}\\t{0}", "contents": "{0}" }},'.format(b))
    // ...
    "scope": "source.python",
    "completions": [
        { "trigger": "ArithmeticError\tArithmeticError", "contents": "ArithmeticError" },
        { "trigger": "AssertionError\tAssertionError", "contents": "AssertionError" },
        { "trigger": "AttributeError\tAttributeError", "contents": "AttributeError" },
        { "trigger": "BaseException\tBaseException", "contents": "BaseException" },
        { "trigger": "BlockingIOError\tBlockingIOError", "contents": "BlockingIOError" },
        { "trigger": "BrokenPipeError\tBrokenPipeError", "contents": "BrokenPipeError" },
        { "trigger": "BufferError\tBufferError", "contents": "BufferError" },
        { "trigger": "BytesWarning\tBytesWarning", "contents": "BytesWarning" },
        { "trigger": "ChildProcessError\tChildProcessError", "contents": "ChildProcessError" },
        { "trigger": "ConnectionAbortedError\tConnectionAbortedError", "contents": "ConnectionAbortedError" },
        { "trigger": "ConnectionError\tConnectionError", "contents": "ConnectionError" },
        { "trigger": "ConnectionRefusedError\tConnectionRefusedError", "contents": "ConnectionRefusedError" },
        { "trigger": "ConnectionResetError\tConnectionResetError", "contents": "ConnectionResetError" },
        { "trigger": "DeprecationWarning\tDeprecationWarning", "contents": "DeprecationWarning" },
        { "trigger": "EOFError\tEOFError", "contents": "EOFError" },
        { "trigger": "Ellipsis\tEllipsis", "contents": "Ellipsis" },
        { "trigger": "EnvironmentError\tEnvironmentError", "contents": "EnvironmentError" },
        { "trigger": "Exception\tException", "contents": "Exception" },
        { "trigger": "False\tFalse", "contents": "False" },
        { "trigger": "FileExistsError\tFileExistsError", "contents": "FileExistsError" },
        { "trigger": "FileNotFoundError\tFileNotFoundError", "contents": "FileNotFoundError" },
        { "trigger": "FloatingPointError\tFloatingPointError", "contents": "FloatingPointError" },
        { "trigger": "FutureWarning\tFutureWarning", "contents": "FutureWarning" },
        { "trigger": "GeneratorExit\tGeneratorExit", "contents": "GeneratorExit" },
        { "trigger": "IOError\tIOError", "contents": "IOError" },
        { "trigger": "ImportError\tImportError", "contents": "ImportError" },
        { "trigger": "ImportWarning\tImportWarning", "contents": "ImportWarning" },
        { "trigger": "IndentationError\tIndentationError", "contents": "IndentationError" },
        { "trigger": "IndexError\tIndexError", "contents": "IndexError" },
        { "trigger": "InterruptedError\tInterruptedError", "contents": "InterruptedError" },
        { "trigger": "IsADirectoryError\tIsADirectoryError", "contents": "IsADirectoryError" },
        { "trigger": "KeyError\tKeyError", "contents": "KeyError" },
        { "trigger": "KeyboardInterrupt\tKeyboardInterrupt", "contents": "KeyboardInterrupt" },
        { "trigger": "LookupError\tLookupError", "contents": "LookupError" },
        { "trigger": "MemoryError\tMemoryError", "contents": "MemoryError" },
        { "trigger": "NameError\tNameError", "contents": "NameError" },
        { "trigger": "None\tNone", "contents": "None" },
        { "trigger": "NotADirectoryError\tNotADirectoryError", "contents": "NotADirectoryError" },
        { "trigger": "NotImplemented\tNotImplemented", "contents": "NotImplemented" },
        { "trigger": "NotImplementedError\tNotImplementedError", "contents": "NotImplementedError" },
        { "trigger": "OSError\tOSError", "contents": "OSError" },
        { "trigger": "OverflowError\tOverflowError", "contents": "OverflowError" },
        { "trigger": "PendingDeprecationWarning\tPendingDeprecationWarning", "contents": "PendingDeprecationWarning" },
        { "trigger": "PermissionError\tPermissionError", "contents": "PermissionError" },
        { "trigger": "ProcessLookupError\tProcessLookupError", "contents": "ProcessLookupError" },
        { "trigger": "ReferenceError\tReferenceError", "contents": "ReferenceError" },
        { "trigger": "ResourceWarning\tResourceWarning", "contents": "ResourceWarning" },
        { "trigger": "RuntimeError\tRuntimeError", "contents": "RuntimeError" },
        { "trigger": "RuntimeWarning\tRuntimeWarning", "contents": "RuntimeWarning" },
        { "trigger": "StopIteration\tStopIteration", "contents": "StopIteration" },
        { "trigger": "SyntaxError\tSyntaxError", "contents": "SyntaxError" },
        { "trigger": "SyntaxWarning\tSyntaxWarning", "contents": "SyntaxWarning" },
        { "trigger": "SystemError\tSystemError", "contents": "SystemError" },
        { "trigger": "SystemExit\tSystemExit", "contents": "SystemExit" },
        { "trigger": "TabError\tTabError", "contents": "TabError" },
        { "trigger": "TimeoutError\tTimeoutError", "contents": "TimeoutError" },
        { "trigger": "True\tTrue", "contents": "True" },
        { "trigger": "TypeError\tTypeError", "contents": "TypeError" },
        { "trigger": "UnboundLocalError\tUnboundLocalError", "contents": "UnboundLocalError" },
        { "trigger": "UnicodeDecodeError\tUnicodeDecodeError", "contents": "UnicodeDecodeError" },
        { "trigger": "UnicodeEncodeError\tUnicodeEncodeError", "contents": "UnicodeEncodeError" },
        { "trigger": "UnicodeError\tUnicodeError", "contents": "UnicodeError" },
        { "trigger": "UnicodeTranslateError\tUnicodeTranslateError", "contents": "UnicodeTranslateError" },
        { "trigger": "UnicodeWarning\tUnicodeWarning", "contents": "UnicodeWarning" },
        { "trigger": "UserWarning\tUserWarning", "contents": "UserWarning" },
        { "trigger": "ValueError\tValueError", "contents": "ValueError" },
        { "trigger": "Warning\tWarning", "contents": "Warning" },
        { "trigger": "WindowsError\tWindowsError", "contents": "WindowsError" },
        { "trigger": "ZeroDivisionError\tZeroDivisionError", "contents": "ZeroDivisionError" },
        { "trigger": "_\t_", "contents": "_" },
        { "trigger": "__build_class__\t__build_class__", "contents": "__build_class__" },
        { "trigger": "__debug__\t__debug__", "contents": "__debug__" },
        { "trigger": "__doc__\t__doc__", "contents": "__doc__" },
        { "trigger": "__import__\t__import__", "contents": "__import__" },
        { "trigger": "__loader__\t__loader__", "contents": "__loader__" },
        { "trigger": "__name__\t__name__", "contents": "__name__" },
        { "trigger": "__package__\t__package__", "contents": "__package__" },
        { "trigger": "__spec__\t__spec__", "contents": "__spec__" },
        { "trigger": "abs\tabs", "contents": "abs" },
        { "trigger": "all\tall", "contents": "all" },
        { "trigger": "any\tany", "contents": "any" },
        { "trigger": "ascii\tascii", "contents": "ascii" },
        { "trigger": "bin\tbin", "contents": "bin" },
        { "trigger": "bool\tbool", "contents": "bool" },
        { "trigger": "bytearray\tbytearray", "contents": "bytearray" },
        { "trigger": "bytes\tbytes", "contents": "bytes" },
        { "trigger": "callable\tcallable", "contents": "callable" },
        { "trigger": "chr\tchr", "contents": "chr" },
        { "trigger": "classmethod\tclassmethod", "contents": "classmethod" },
        { "trigger": "compile\tcompile", "contents": "compile" },
        { "trigger": "complex\tcomplex", "contents": "complex" },
        { "trigger": "copyright\tcopyright", "contents": "copyright" },
        { "trigger": "credits\tcredits", "contents": "credits" },
        { "trigger": "delattr\tdelattr", "contents": "delattr" },
        { "trigger": "dict\tdict", "contents": "dict" },
        { "trigger": "dir\tdir", "contents": "dir" },
        { "trigger": "divmod\tdivmod", "contents": "divmod" },
        { "trigger": "enumerate\tenumerate", "contents": "enumerate" },
        { "trigger": "eval\teval", "contents": "eval" },
        { "trigger": "exec\texec", "contents": "exec" },
        { "trigger": "exit\texit", "contents": "exit" },
        { "trigger": "filter\tfilter", "contents": "filter" },
        { "trigger": "float\tfloat", "contents": "float" },
        { "trigger": "format\tformat", "contents": "format" },
        { "trigger": "frozenset\tfrozenset", "contents": "frozenset" },
        { "trigger": "getattr\tgetattr", "contents": "getattr" },
        { "trigger": "globals\tglobals", "contents": "globals" },
        { "trigger": "hasattr\thasattr", "contents": "hasattr" },
        { "trigger": "hash\thash", "contents": "hash" },
        { "trigger": "help\thelp", "contents": "help" },
        { "trigger": "hex\thex", "contents": "hex" },
        { "trigger": "id\tid", "contents": "id" },
        { "trigger": "input\tinput", "contents": "input" },
        { "trigger": "int\tint", "contents": "int" },
        { "trigger": "isinstance\tisinstance", "contents": "isinstance" },
        { "trigger": "issubclass\tissubclass", "contents": "issubclass" },
        { "trigger": "iter\titer", "contents": "iter" },
        { "trigger": "len\tlen", "contents": "len" },
        { "trigger": "license\tlicense", "contents": "license" },
        { "trigger": "list\tlist", "contents": "list" },
        { "trigger": "locals\tlocals", "contents": "locals" },
        { "trigger": "map\tmap", "contents": "map" },
        { "trigger": "max\tmax", "contents": "max" },
        { "trigger": "memoryview\tmemoryview", "contents": "memoryview" },
        { "trigger": "min\tmin", "contents": "min" },
        { "trigger": "next\tnext", "contents": "next" },
        { "trigger": "object\tobject", "contents": "object" },
        { "trigger": "oct\toct", "contents": "oct" },
        { "trigger": "open\topen", "contents": "open" },
        { "trigger": "ord\tord", "contents": "ord" },
        { "trigger": "pow\tpow", "contents": "pow" },
        { "trigger": "print\tprint", "contents": "print" },
        { "trigger": "property\tproperty", "contents": "property" },
        { "trigger": "quit\tquit", "contents": "quit" },
        { "trigger": "range\trange", "contents": "range" },
        { "trigger": "repr\trepr", "contents": "repr" },
        { "trigger": "reversed\treversed", "contents": "reversed" },
        { "trigger": "round\tround", "contents": "round" },
        { "trigger": "set\tset", "contents": "set" },
        { "trigger": "setattr\tsetattr", "contents": "setattr" },
        { "trigger": "slice\tslice", "contents": "slice" },
        { "trigger": "sorted\tsorted", "contents": "sorted" },
        { "trigger": "staticmethod\tstaticmethod", "contents": "staticmethod" },
        { "trigger": "str\tstr", "contents": "str" },
        { "trigger": "sum\tsum", "contents": "sum" },
        { "trigger": "super\tsuper", "contents": "super" },
        { "trigger": "tuple\ttuple", "contents": "tuple" },
        { "trigger": "type\ttype", "contents": "type" },
        { "trigger": "vars\tvars", "contents": "vars" },
        { "trigger": "zip\tzip", "contents": "zip" },
        { "trigger": "False \tFalse ", "contents": "False " },
        { "trigger": "None \tNone ", "contents": "None " },
        { "trigger": "True \tTrue ", "contents": "True " },
        { "trigger": "and \tand ", "contents": "and " },
        { "trigger": "as \tas ", "contents": "as " },
        { "trigger": "assert \tassert ", "contents": "assert " },
        { "trigger": "break \tbreak ", "contents": "break " },
        { "trigger": "class \tclass ", "contents": "class " },
        { "trigger": "continue \tcontinue ", "contents": "continue " },
        { "trigger": "def \tdef ", "contents": "def " },
        { "trigger": "del \tdel ", "contents": "del " },
        { "trigger": "elif \telif ", "contents": "elif " },
        { "trigger": "else \telse ", "contents": "else " },
        { "trigger": "except \texcept ", "contents": "except " },
        { "trigger": "finally \tfinally ", "contents": "finally " },
        { "trigger": "for \tfor ", "contents": "for " },
        { "trigger": "from \tfrom ", "contents": "from " },
        { "trigger": "global \tglobal ", "contents": "global " },
        { "trigger": "if \tif ", "contents": "if " },
        { "trigger": "import \timport ", "contents": "import " },
        { "trigger": "in \tin ", "contents": "in " },
        { "trigger": "is \tis ", "contents": "is " },
        { "trigger": "lambda \tlambda ", "contents": "lambda " },
        { "trigger": "nonlocal \tnonlocal ", "contents": "nonlocal " },
        { "trigger": "not \tnot ", "contents": "not " },
        { "trigger": "or \tor ", "contents": "or " },
        { "trigger": "pass \tpass ", "contents": "pass " },
        { "trigger": "raise \traise ", "contents": "raise " },
        { "trigger": "return \treturn ", "contents": "return " },
        { "trigger": "try \ttry ", "contents": "try " },
        { "trigger": "while \twhile ", "contents": "while " },
        { "trigger": "with \twith ", "contents": "with " },
        { "trigger": "yield \tyield ", "contents": "yield " }
    ]
}
